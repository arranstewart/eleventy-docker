
name: build-push

on:
  push:
    paths-ignore:
      - '*.md'
      - '**.md'
      - '.gitignore'
      - '.dockerignore'
  pull_request:
    paths-ignore:
      - '*.md'
      - '**.md'
      - '.gitignore'
      - '.dockerignore'
  release:
    types:
      - created

env:
  REGISTRY: ghcr.io
  DOCKER_HUB_OWNER: adstewart

jobs:
  docker_build:
    name: docker build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        name: Check out code

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Log in to github Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up docker+QEMU (for emulation support)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Store useful variables for later steps
        # we store in the env, and in GITHUB_OUTPUT so we can reference them either from a YAML
        # context or the shell
        id: useful_variables
        shell: bash
        run: |
          set -x
          source METADATA.env

          echo "image_version=$IMAGE_VERSION" >> "$GITHUB_OUTPUT"
          echo "image_version=$IMAGE_VERSION" >> "$GITHUB_ENV"

          echo "docker_hub_path=$IMAGE_NAMESPACE/$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "docker_hub_path=$IMAGE_NAMESPACE/$IMAGE_NAME" >> "$GITHUB_ENV"

          # image "path", excluding version
          image_path=$(python3 ./print_image_path.py)
          echo "image_path=$image_path" | sed 's/:.*//' >> "$GITHUB_OUTPUT"
          echo "image_path=$image_path" | sed 's/:.*//' >> "$GITHUB_ENV"

      - name: test variables
        run: |
          set -x
          echo image_version is "$image_version"
          echo docker_hub_path is "$docker_hub_path"
          echo image_path is "$image_path"


      - name: Generate image labels
        id: metadata
        shell: bash
        run: |
          set -x
          # our python script output gets sent to labels.txt
          # the syntax for storing this content so its accessible in later steps uses shell-like
          # EOF syntax.
          # See <https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter>
          # and <https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#example-of-a-multiline-string>
          python3 print_docker_metadata.py > labels.txt
          {
            echo 'labels<<EOF'
            cat labels.txt
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: test image labels
        run: |
          set -x
          printf '%q\n' "${{ steps.metadata.outputs.labels }}"

      - name: Generate image tags
        id: tags
        shell: bash
        run: |
          set -x
          {
            echo 'tags<<EOF'
            for version in "$image_version" latest; do
              printf '%s:%s\n' "$docker_hub_path" "$version";
              printf '%s:%s\n' "$image_path" "$version";
            done
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: test image tags
        run: |
          set -x
          printf '%q\n' "${{ steps.tags.outputs.tags }}"

      - name: Build and push (multi-arch, with cache and labels)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.tags.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=registry,ref=${{ steps.useful_variables.outputs.image_path }}:buildcache
          cache-to: type=registry,ref=${{ steps.useful_variables.outputs.image_path }}:buildcache,mode=max

  test-multiarch:
    needs: docker_build
    runs-on: ubuntu-latest
    #if: startsWith(github.ref, 'refs/tags/')

    strategy:
      fail-fast: false
      matrix:
        arch: [linux/amd64, linux/arm64]

    steps:
      - uses: actions/checkout@v2
        name: Check out code

      - name: Set up docker+QEMU (for emulation support)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Load version
        id: version
        shell: bash
        run: |
          set -x
          source METADATA.env
          echo "version=$IMAGE_VERSION" >> "$GITHUB_OUTPUT"


      - name: test version
        run: |
          echo "${{ steps.version.outputs.version }}"

      - name: Run container tests
        run: |
          echo "Running test for platform: ${{ matrix.arch }}"
          set -x

          image_path=$(python3 ./print_image_path.py)
          echo "using image path '$image_path'"

          docker pull --platform=${{ matrix.arch }} "$image_path"

          docker -D run --rm \
            --workdir=/opt/site \
            --platform=${{ matrix.arch }} \
            --entrypoint=sh \
            "$image_path" \
              -c "npx @11ty/eleventy --version"






